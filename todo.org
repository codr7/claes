434
145

* sqlite
** add support for namespaced ids
*** handle recursively in id emit
*** (db/new-table "users")
*** (db/connect "")
*** (db/begin db)
*** (db/create users)
** add table_column.type_sql()
** add I64Column
** add StringColumn
** add constraint/key/foreign_key
** add Schema
*** add param to table

(let [users (db/table "users")
      user-name1 (db/string-column users)
      user-name2 (db/string-column users)
      cx (connect "file://test.dn")]
  (db/create users cx))

* set sqllite settings in db/connect()
** pragma journal_mode = "wal"
** pragma synchronous = "off"
** pragma foreign_keys = "on"

* extract curl to separare dir like db
** rename to http/Client and http/send
** update llama

* define <= and >= in core eval block
** use vararg/splat

* add optional Cell.reverse method
** in place
** default error
** string, vector, pair
** replaces reverse-vector

* implement Pair::iter

* add len method
** add Cell.len()
** return 1 default
** override for i64, string, vector, pair (2)

* add support for pair calls
*** drop _ recursively

* return pair from parse-js
** value:end_pos

* add parse-number
** return i64 or f64

* add composition using pipe character
** check jalang/dot

* add support for f64 > 1 in reader

* add defcon
** command line arg
** vm.defcon
** disable more the lower it is
** disallow anything that changes the machine
*** no define, ^, stop, dump, say, curl, set
*** skip definition in library constructor

* add libsodium
** snackis
** add hex method
** return hex contents
** add parse-hex method
** optional like curl


* add import macro
** register core/curl in root env
*** add VM.root_env
** remove default curl import
** use in llama.claes

* add Type.peek/pop
** self default
*** set nil on pop
** first för pair
** peek/pop för vector/string
** pop for i64
** add stacks to readme

* replace Rec with move/erase

* add filter macro
* add reduce macro
* add map macro

* aoc 1

* add vm.arity vector
** write failing test with nested splats
** add PUSH_ARITY op
*** push initial arity
** pop in call ops
** skip zeroing in call ops

* use vm alloc for Ref imps
* use vm alloc for Env imps

* add incr macro
** add increment op

* rebind updated parent Expr envs in Env constructor
** replaces default create of new env in Expr

* add slurp-lines
** return iteratpr

* fix recursion/bindings

(^ fib [n]
  (let [table {}]
    (^ helper [nn]
      (or (table nn)
          (let [result (if (< n 2) n (+ (helper (- nn 1))
                                        (helper (- nn 2))))]
           (table nn result)
           (table nn))))
    (helper n))))

(fib 10)

* add ifdef macro
** only emit args if symbol is defined
