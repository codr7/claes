* fix compile
** add Schema <<

* make stack fixed size
* make frames fixed size
* make ops fixed size
* make regs fixed size
* convert call to fixed size calls?

* profile using valgrind

* sqlite
** add Record
** add I64Column
** add StringColumn
** implement db/Schema.emit_call
** add constraint/key/foreign_key

(db/connect "file:test.db")

(let [db (db/Schema
           (table users (email)
	     (string-column email)
             (string-column name1)
             (string-column name2)))
      cx (db/connect "file:test.db")]
  (db/create db cx))

* modify sqlite connect settings
** pragma journal_mode = "wal"
** pragma synchronous = "off"
** pragma foreign_keys = "on"
** add to readme

* extract curl to separare dir like db
** rename to http/Client and http/send
** update llama

* define <= and >= in core eval block
** use vararg/splat

* add string lib
** extract from core
*** join-strings, reverse-string

* add optional Cell.reverse method
** in place
** default error
** string, vector, pair
** replaces reverse-vector

* add read/write
** add Cell/Type methods
** cin/out

* implement Pair::iter

* add len method
** add Cell.len()
** return 1 default
** override for i64, string, vector, pair (2)

* add support for pair calls
*** drop _ recursively

* return pair from parse-js
** value:end_pos

* add parse-number
** return i64 or f64

* add composition using pipe character
** check jalang/dot

* add support for f64 > 1 in reader

* add defcon
** command line arg
** vm.defcon
** disable more the lower it is
** disallow anything that changes the machine
*** no define, ^, stop, dump, say, curl, set
*** skip definition in library constructor

* add import macro
** register core/curl in root env
*** add VM.root_env
*** use as source in main/repl
** remove default curl import

* add Type.peek/pop
** self default
*** set nil on pop
** first för pair
** peek/pop för vector/string
** pop for i64
** add stacks to readme

* replace Rec with move/erase

* add filter macro
* add reduce macro
* add map macro

* aoc 1

* add vm.arity vector
** write failing test with nested splats
** add PUSH_ARITY op
*** push initial arity
** pop in call ops
** skip zeroing in call ops

* use vm alloc for Ref imps
* use vm alloc for Env imps

* add incr macro
** add increment op

* rebind updated parent Expr envs in Env constructor
** replaces default create of new env in Expr

* add slurp-lines
** return iterator

* fix recursion/bindings

(^ fib [n]
  (let [table {}]
    (^ helper [nn]
      (or (table nn)
          (let [result (if (< n 2) n (+ (helper (- nn 1))
                                        (helper (- nn 2))))]
           (table nn result)
           (table nn))))
    (helper n))))

(fib 10)

* add ifdef macro
** only emit args if symbol is defined
