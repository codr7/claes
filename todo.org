3773
2064

      forms::Id *t;

      if (t = target.as(forms::Id); !t) {
	return Error(loc, "Invalid reference update target: ", target);
      }
      
      auto found = env.find(t->name);

      if (!found) {
	return Error(loc, "Unknown identifier: ", t->name);
      }

      if (found->type != types::Reg::get()) {
	return Error(loc, "Invalid reference update target: " + *found);
      }

      if (auto e = my_args.pop().emit(vm, env, my_args); e) {
	return e;
      }
      
      vm.emit<ops::SetRef>(found->as(types::Reg::get()));

* add ref support
** add call support
*** get without args and set with arg

* add vector call support
** get / set depending on arity

* add string call support
** get / set depending on arity

* add Type.peek/pop
** self default
*** set nil on pop
** first för pair
** peek/pop för vector/string
** pop for i64

* add for macro

* add iters
** ref counted imp
** add iter type
** add value.iter
*** return iter value
** push value default
** implement for pair/integer/vector/string

* add Map type
** add {} reader
** Value = map<Cell, Cell>

* aoc
* use vm specific alloc for Ref imps
* use vm specific alloc for Env imps

* add increment op
** like decrement
