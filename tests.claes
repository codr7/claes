(check 42
  42)

(check F
  (Bit 0))

(check T
  (Bit 1))
  
(check 42
  (let [x 42] x))

(check 42
  (let [x 42 y x] y))

(check 2
  (let [x 1 y 2 z 3] y))

(check 1
  (let [x 1] (let [x 2]) x))

(check 1
  (let [x 1] (let [] x)))

(check [0 2 42]:[0 2]
  (let [foo 1 bar 2]
    (decr foo)
    (set foo [foo bar] bar foo)
    (push foo 42)
    foo:bar))

(check 6
  (+ 1 2 3))

(check 42
  (- (- 42)))

(check 2
  (- 3 1))

(check 2
  (let [x 3]
    (decr x)))

(check 2
  (let [x 3]
    (decr x)
    x))

(check 3
  (define foo 1 bar 2)
  (+ foo bar))
  
(check 1
  (if T 1 2))

(check 2
  (if F 1 2))

(check [\a \b \c]
  (let [result []]
    (for c "abc"
      (push result c))

    result))

(check 6
  (^ sum [n]
    (let [result 0]
      (for i n
        (set result (+ result i)))
      result))

   (sum 4))

(check 6
  (^ sum [n]
    (^ helper [i result]
      (if (= i n)
        result
	(helper (+ i 1) (+ result i))))
    (helper 0 0))
    
  (sum 4))

(check T
  (=0 0))

(check F
  (=0 1))

(check T
  (= 1 1))

(check F
  (= 1 2))

(check T
  (< 1 2 3))

(check F
  (< 2 1 1))

(check T
  (> 3 2 1))

(check F
  (> 3 2 2))

(check 42
  (let [x _] 
    (push x 42)
    x))

(check 1:2
  (let [x 2]
    (push x 1)
    x))

(check "abc"
  (let [x "a"]
    (push x \b \c)
    x))

(check "foo42T"
 (String "foo" 42 T))

(check [1 2 3]
  (Vector 1 2 3))

(check [1 2 3]
  (let [x [1]]
    (push x 2 3)
    x))

(check 2
  ([1 2 3] 1))

(check [1 4 3]
  (let [x [1 2 3]]
    (x 1 4)))

(check 42
  (&42))

(check &42
  (&_ 42))

(check &42
  (let [x &_]
    (x 42)
    x))

(check T
  ((iter T)))

(check T
  ((iter (iter T))))

(check [\a \b \c]
  (apply Vector \a "bc"))

(check 42
  (^ foo [] 42)
  (foo))

(check 42
  (^ foo [x] x)
  (foo 42))

(check 42
 ((^ [x] x) 42))

(check 42
  (let [x 41] (set x (+ x 1)) x))
  
(load (path "fib.claes"))

(check 55
  (fib-rec 10))

(check 55
  (fib-tail 10 0 1))