(debug)

(check 42
  42)

(check F
  (Bit 0))

(check T
  (Bit 1))

(check 42
  (and 42))

(check 42
  (and T 42))

(check F
  (and F 42))

(check 42
  (or 42))

(check T
  (or T 42))

(check 42
  (or F 42))
  
(check 42
  (let [x 42] x))

(check 42
  (let [x 42 y x] y))

(check 2
  (let [x 1 y 2 z 3] y))

(check 1
  (let [x 1] (let [x 2]) x))

(check 1
  (let [x 1] (let [] x)))

(check [0 2 42]:[0 2]
  (let [foo 1 bar 2]
    (decr foo)
    (set foo [foo bar] bar foo)
    (push foo 42)
    foo:bar))

(check 6
  (+ 1 2 3))

(check 42
  (- (- 42)))

(check 2
  (- 3 1))

(check 2
  (let [x 3]
    (decr x)))

(check 2
  (let [x 3]
    (decr x)
    x))

(check 3
  (define foo 1 bar 2)
  (+ foo bar))
  
(check 1
  (if T 1 2))

(check 2
  (if F 1 2))

(check 1:1
  (let [v [1 2 3] 
        i (iter v) j i]
    (i):(j)))

(check [\a \b \c]
  (let [result []]
    (for c "abc"
      (push result c))

    result))

(check 6
  (^ sum [n]
    (let [result 0]
      (for i n
        (set result (+ result i)))
      result))

   (sum 4))

(check 6
  (^ sum [n]
    (^ helper [i result]
      (if (= i n)
        result
	(helper (+ i 1) (+ result i))))
    (helper 0 0))
    
  (sum 4))

(check [1 2 3]
  (^ foo [x*]
    x)
    
  (foo 1 2 3))

(check 6
  (+ [1 2 3]*))

(check 6
  (+ 4*))

(check 42
  (^ foo ['x]
    x)

  ((foo 42)))

(check 42
  (let [foo 42]
    (^ bar ['x]
      (x))

    (bar foo)))

(check 1
  (let [foo 1]
    (^ bar ['x])
    (bar (set foo 2))
    foo))

(check T:F
  (z? 0):(z? 1))

(check T:F
  (= 1 1):(= 1 2))

(check T:F
  (< 1 2 3):(< 2 1 1))

(check T:F
  (> 3 2 1):(> 3 2 2))

(check 42
  (let [x _] 
    (push x 42)
    x))

(check 1:2
  (let [x 2]
    (push x 1)
    x))

(check "abc"
  (let [x "a"]
    (push x \b \c)
    x))

(check "foo42T"
 (String "foo" 42 T))

(check 'foobar42T
  (Sym "foo" 'bar 42 T))

(check 'foobarbaz
  '(,Sym foo bar baz))

(check ['foo 42 'bar]
  (let [x 42]
    '[foo ,x bar]))

(check "foo"
  (String 'foo))

(check [1 2 3]
  (Vector 1 2 3))

(check 'bar
  ('[foo bar baz] 1))

(check ['foo 'qux 'baz]
  (let [x '[foo bar baz]]
    (x 1 'qux)
    x))

(check {1 2:3 4}
  (Map 1 2:3 4))

(check 2
  ({1 2 3} 2))

(check 2
  ('{foo:1 bar:2 baz:3} 'bar))

(check '{foo:1 bar:4 baz:3}
  (let [m '{foo:1 bar:2 baz:3}]
    (m 'bar 4)
    m))

(check 42
  (let [m '{foo:1 bar:2 baz:3}]
    (m 'bar:42)
    (m 'bar)))

(check [1 2 3]
  (let [x [1]]
    (push x 2 3)
    x))

(check 2
  ([1 2 3] 1))

(check [1 4 3]
  (let [x [1 2 3]]
    (x 1 4)))

(check 42
  (&42))

(check &42
  (&_ 42))

(check &42
  (let [x &_]
    (x 42)
    x))

(check T
  ((iter T)))

(check T
  ((iter (iter T))))

(check [\a \b \c]
  (apply Vector \a "bc"))

(check [\a \b \c]
  (Vector \a "bc"*))

(check 42
  (^ foo [] 42)
  (foo))

(check 42
  (^ foo [x] x)
  (foo 42))

(check 42
 ((^ [x] x) 42))

(check 42
  (let [x 41] (set x (+ x 1)) x))
  
(check "[42, .123, \"foo\", \"bar\", null, true, [1, 2]]"
  (js [42 .123 "foo" 'bar _ T 1:2]))

(check ["foo" 42 T F _ []]
  (parse-js `["foo", 42, true, false, null, []]`))

(check {1 2 3}
 (^ foo [x]
    (let [y {}]
      (^ helper [z]
        (if (z? z) y (do
          (y z:z)
  	(helper (- z 1)))))
      (helper x)))

  (foo 3))
  
(load (path "fib.claes"))

(check 55
  (fib-rec 10))

(check 55
  (fib-tail 10 0 1))